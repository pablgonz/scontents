\RequirePackage{l3keys2e}
\RequirePackage{xparse}[2019/05/28]
\ProvidesExplPackage{scontents}{2019/09/10}{1.2g}
  {Stores LaTeX contents in memory or files}
\@ifpackagelater { xparse } { 2019/05/03 }
  { }
  {
    \PackageError { scontents } { Support~package~xparse~too~old }
      {
        You~need~to~update~your~installation~of~the~bundles~
        'l3kernel'~and~'l3packages'.\MessageBreak
        Loading~scontents~will~abort!
      }
    \file_input_stop:
  }
\keys_define:nn { scontents }
  {
    store-env .tl_set:N         = \l__scontents_name_seq_env_tl,
    store-env .initial:n        = contents,
    print-env .bool_set:N       = \l__scontents_print_env_bool,
    print-env .initial:n        = false,
    store-cmd .tl_set:N         = \l__scontents_name_seq_cmd_tl,
    store-cmd .initial:n        = contents,
    print-cmd .bool_set:N       = \l__scontents_print_cmd_bool,
    print-cmd .initial:n        = false,
    print-all .meta:n           = { print-env = true , print-cmd = true },
    store-env .value_required:n = true,
    store-cmd .value_required:n = true,
    print-env .value_required:n = true,
    print-cmd .value_required:n = true,
    print-all .value_required:n = true
  }
%%^^A Process options for pkg
\ProcessKeysOptions { scontents }
%%^^A Internal tl vars
\tl_new:N \l__scontents_macro_tmp_tl
\tl_new:N \l__scontents_fname_out_tl
\tl_new:N \l__scontents_temp_tl
\tl_new:N \l__scontents_file_tl
\tl_new:N \g__scontents_temp_tl
%%^^A Internal bool vars
\bool_new:N \l__scontents_writing_bool
\bool_set_false:N \l__scontents_writing_bool
\bool_new:N \l__scontents_storing_bool
\bool_set_true:N  \l__scontents_storing_bool
%%^^A A token list to match \env{verbatimsc}
\tl_new:N \g__scontents_end_verbatimsc_tl
\tl_gset_rescan:Nnn
  \g__scontents_end_verbatimsc_tl
  {
    \char_set_catcode_other:N \\
    \char_set_catcode_other:N \{
    \char_set_catcode_other:N \}
  }
  { \end{verbatimsc} }
\tl_const:Nx \c__scontents_end_env_tl
  { \c_backslash_str end \c_left_brace_str scontents \c_right_brace_str }
%%^^A A string to hidden space tl before grab argument
\str_const:Nx \c__scontents_hidden_space_str
  { \c_percent_str scontentshs \c_percent_str }
%%^^A Internal quarks
\quark_new:N \q__scontents_stop
\quark_new:N \q__scontents_mark
\iow_new:N \l__scontents_file_iow
%%^^A Copy of \scantokens
\cs_new_eq:NN \__scontents_rescan_tokens:w \tex_scantokens:D
\cs_new:Npx \__scontents_tab: { \c_space_tl }
\cs_new:Npn \__scontents_par: { ^^J ^^J }
\cs_generate_variant:Nn \tl_remove_once:Nn { NV }
\cs_generate_variant:Nn \tl_replace_all:Nnn { Nx, Nxx }
%%^^A Add keys to scontents environnment
\keys_define:nn { scontents }
  {
    write-env .code:n           = {
                                    \bool_set_true:N \l__scontents_writing_bool
                                    \tl_set:Nn \l__scontents_fname_out_tl {#1}
                                  },
    write-out .code:n           = {
                                    \bool_set_false:N \l__scontents_storing_bool
                                    \bool_set_true:N  \l__scontents_writing_bool
                                    \tl_set:Nn \l__scontents_fname_out_tl {#1}
                                  },
    write-env .value_required:n = true,
    write-out .value_required:n = true
  }
%%^^A A sub/keys for command |\Scontents|
\keys_define:nn { scontents / Scontents }
  {
    print-cmd .meta:nn = { scontents } { print-cmd = #1 },
    store-cmd .meta:nn = { scontents } { store-cmd = #1 }
  }
%%^^A Append content to seq
\cs_new_protected:Npn \__scontents_append_contents:nn #1#2
  {
    \tl_if_blank:nT {#1}
      { \msg_error:nn { scontents } { empty-store-cmd } }
    \seq_if_exist:cF { g__scontents_seq_name_#1_seq }
      { \seq_new:c { g__scontents_seq_name_#1_seq } }
    \seq_gput_right:cn { g__scontents_seq_name_#1_seq } {#2}
  }
\cs_generate_variant:Nn \__scontents_append_contents:nn { Vx }
\cs_new:Npn \__scontents_getfrom_seq:nn #1#2
  { \seq_item:cn { g__scontents_seq_name_#2_seq } {#1} }
%%^^A Storing content in seq
\cs_new_protected:Npn \__scontents_stored_to_seq:
  {
    \regex_replace_all:nnN { \^^M } { \^^J } \l__scontents_macro_tmp_tl
    \tl_log:N \l__scontents_macro_tmp_tl
    \__scontents_append_contents:Vx \l__scontents_name_seq_env_tl
      { \exp_not:N \__scontents_rescan_tokens:w { \tl_use:N \l__scontents_macro_tmp_tl } }
  }
%%^^A Define {scontents} whit [key=val] (delaying)
\NewDocumentEnvironment { scontents } { }
  {
    \char_set_catcode_active:N \^^M
    \__scontents_start_environment:w
  }
  {
    \__scontents_stop_environment:
    \__scontents_atend_environment:
  }
%%^^A Test [key=val] for environment scontents
\cs_new_protected:Npn \__scontents_environment_inline:w
  {
    \peek_charcode_ignore_spaces:NTF [ % ]
      { \__scontents_environment_keys:w }
      {
        \__scontents_environment_junk:xw
          { after~\c_backslash_str begin{scontents} }
      }
  }
\cs_new_protected:Npn \__scontents_environment_keys:w [ #1 ]
  {
    \keys_set_known:nn { scontents } {#1}
    \__scontents_environment_junk:xw
      { after~optional~argument~to~\c_backslash_str begin{scontents} }
  }
\cs_new_protected:Npn \__scontents_environment_junk:nw #1 #2 \q__scontents_mark
  {
    \tl_if_blank:nF {#2}
      { \msg_error:nnnn { scontents } { junk-after-begin } {#1} {#2} }
  }
\cs_generate_variant:Nn \__scontents_environment_junk:nw { x }
%%^^A First start_environment/stop_environment
\group_begin:
  \char_set_catcode_active:N \^^I
  \char_set_catcode_active:N \^^L
  \char_set_catcode_active:N \^^M
  \cs_new_protected:Npn \__scontents_start_environment:w #1 ^^M
    {
      \__scontents_environment_inline:w #1 \q__scontents_mark
      \__scontents_make_control_chars_active:
      \group_begin:
        \__scontents_file_tl_write_start:V \l__scontents_fname_out_tl
    }
  \cs_new_protected:Npn \__scontents_stop_environment:
    {
        \__scontents_file_write_stop:N \l__scontents_macro_tmp_tl
        \exp_args:NNNV
      \group_end:
      \tl_set:Nn \l__scontents_macro_tmp_tl \l__scontents_macro_tmp_tl
    }
  \cs_new_protected:Npn \__scontents_file_tl_write_start:n #1
    {
      \group_begin:
        \bool_if:NT \l__scontents_writing_bool
          {
            \file_if_exist:nTF {#1}
              { \msg_warning:nnx { scontents } { rewriting-file } {#1} }
              { \msg_warning:nnx { scontents } { writing-file } {#1} }
            \iow_open:Nn \l__scontents_file_iow {#1}
          }
        \tl_clear:N \l__scontents_file_tl
        \seq_map_function:NN \l_char_special_seq \char_set_catcode_other:N
        \int_step_function:nnN { 128 } { 255 } \char_set_catcode_letter:n
        \use:x
          {
            \cs_set:Npn \exp_not:N \__scontents_tmpa:w
              ####1 \c__scontents_end_env_tl
              ####2 \c__scontents_end_env_tl
              ####3 \exp_not:N \q_stop
              {
                \exp_not:N \tl_if_blank:nTF {####3}
                  {
                    \bool_if:NT \l__scontents_writing_bool
                      { \iow_now:Nn \l__scontents_file_iow {####1} }
                    \bool_if:NT \l__scontents_storing_bool
                      {
                        \tl_put_right:Nn \exp_not:N \l__scontents_file_tl
                          { \exp_not:N ^^M ####1 }
                      }
                  }
                  {
                    \cs_set:Npn \exp_not:N \__scontents_ret:w { \exp_not:N \end{scontents} }
                    \char_set_active_eq:NN \exp_not:N ^^M \exp_not:N \__scontents_ret:w
                  }
                \exp_not:N ^^M
              }
          }
        \cs_set_protected:Npx \__scontents_ret:w ##1 ^^M
          {
            \exp_not:N \__scontents_tmpa:w
            ##1 \c__scontents_end_env_tl
                \c__scontents_end_env_tl
                \exp_not:N \q_stop
          }
        \__scontents_make_control_chars_active:
        \__scontents_ret:w
    }
  \cs_new_protected:Npn \__scontents_file_write_stop:N #1
    {
      \bool_if:NT \l__scontents_writing_bool
        { \iow_close:N \l__scontents_file_iow }
      \use:x
        {
          \group_end:
          \bool_if:NT \l__scontents_storing_bool
            {
              \tl_set:Nn \exp_not:N #1
                { \exp_args:NV \__scontents_remove_leading_cr:n \l__scontents_file_tl }
            }
        }
    }
  \cs_new:Npn \__scontents_remove_leading_cr:n #1
    { \exp_not:o { \__scontents_remove_leading_cr:w #1 } }
  \cs_new:Npn \__scontents_remove_leading_cr:w ^^M { }
\group_end:
\cs_generate_variant:Nn \__scontents_file_tl_write_start:n { V }
%%^^A Second atend_environment/stored_to_seq
\cs_new_protected:Npn \__scontents_atend_environment:
  {
    \bool_if:NT \l__scontents_storing_bool
      { \__scontents_stored_to_seq: }
    \bool_if:NT \l__scontents_print_env_bool
      {
        \tl_gset:Nx \g__scontents_temp_tl
          { \__scontents_getfrom_seq:nn { -1 } { \l__scontents_name_seq_env_tl } }
        \tl_gput_right:Nn \g__scontents_temp_tl { \tl_gclear:N \g__scontents_temp_tl }
        \group_insert_after:N \g__scontents_temp_tl
      }
    \tl_clear:N \l__scontents_macro_tmp_tl
  }
%%^^A User command \Scontents to stored content
\NewDocumentCommand { \Scontents }{ !s !O{} }
  {
    \group_begin:
      \IfNoValueF {#2}
        { \keys_set_known:nn { scontents / Scontents } {#2} }
      \IfBooleanTF{#1}
        { \__scontents_verb_arg:w }
        { \__scontents_norm_arg:n }
  }
\cs_new_protected:Npn \__scontents_norm_arg:n #1
  {
     \exp_args:NV \__scontents_append_contents:nn \l__scontents_name_seq_cmd_tl {#1}
     \bool_if:NT \l__scontents_print_cmd_bool
       { \__scontents_getfrom_seq:nn { -1 } { \l__scontents_name_seq_cmd_tl } }
   \group_end:
  }
\NewDocumentCommand { \__scontents_verb_arg:w } { +v }
  {
      \tl_set:Nn \l__scontents_temp_tl {#1}
      \tl_put_right:Nx \l__scontents_temp_tl { \c__scontents_hidden_space_str }
      \tl_replace_all:Nxx \l__scontents_temp_tl { \iow_char:N \^^M } { \iow_char:N \^^J }
      \tl_log:N \l__scontents_temp_tl
      \exp_args:NVx \__scontents_append_contents:nn \l__scontents_name_seq_cmd_tl
        { \exp_not:N \__scontents_rescan_tokens:w { \tl_use:N \l__scontents_temp_tl } }
      \bool_if:NT \l__scontents_print_cmd_bool
        { \__scontents_getfrom_seq:nn { -1 } { \l__scontents_name_seq_cmd_tl } }
    \group_end:
  }
%%^^A User command \getstored
\NewDocumentCommand { \getstored } { O{1} m }
  { \__scontents_getfrom_seq:nn {#1} {#2} }
%%^^A User command \typestored
\NewDocumentCommand { \typestored } { O{1} m }
  {
    \group_begin:
      \tl_set:Nx \l__scontents_temp_tl { \__scontents_getfrom_seq:nn {#1} {#2} }
      \tl_set:Nx \l__scontents_temp_tl { \__scontents_strip_rescan:N \l__scontents_temp_tl }
      \tl_remove_once:NV \l__scontents_temp_tl \c__scontents_hidden_space_str
      \tl_log:N \l__scontents_temp_tl
      \__scontents_verb_print:N \l__scontents_temp_tl
    \group_end:
  }
%%^^A Internal verb_print:N
\group_begin:
  \char_set_catcode_active:N \^^M
  \cs_new_protected:Npn \__scontents_verb_print:N #1
    {
      \tl_if_blank:VT #1
        { \msg_error:nnn { scontents } { empty-variable } {#1} }
      \cs_set_eq:NN \__scontents_verb_print_EOL: ^^M
      \cs_set_eq:NN ^^M \scan_stop:
      \use:x
        {
          \exp_not:N \__scontents_rescan_tokens:w
            {
              \exp_not:N \begin{verbatimsc} ^^M
              \__scontents_strip_rescan:N #1 ^^M
              \g__scontents_end_verbatimsc_tl
            }
        }
      \cs_set_eq:NN ^^M \__scontents_verb_print_EOL:
    }
\group_end:
%%^^A Definition of verbatimsc environment
\use:x
  {
    \cs_new_protected:Npn \exp_not:N \__scontents_xverb:w
      ##1 \g__scontents_end_verbatimsc_tl
  }
      { #1 \end{verbatimsc} }
\NewDocumentEnvironment { verbatimsc } { }
  {
    \cs_set_eq:cN { @xverbatim } \__scontents_xverb:w
    \verbatim
  }
  { }
%%^^A Internal check scantokens
\cs_new:Npn \__scontents_strip_rescan:N #1
  { \exp_args:NV \__scontents_strip_rescan:n #1 }
\cs_new:Npn \__scontents_strip_rescan:n #1
  {
    \tl_if_head_is_N_type:nTF {#1}
      {
        \__scontents_if_rescan:NwTF #1 \q__scontents_mark
          {
            \exp_args:No \tl_if_single_token:nTF { \use_none:nn #1 ? }
              { \exp_not:o { \use_ii:nn #1 } }
              { \exp_not:n {#1} }
          }
          { \exp_not:n {#1} }
      }
      { \exp_not:n {#1} }
  }
\prg_new_conditional:Npnn \__scontents_if_rescan:Nw #1#2 \q__scontents_mark { TF }
  {
    \token_if_eq_meaning:NNTF \__scontents_rescan_tokens:w #1
      { \prg_return_true: }
      { \prg_return_false: }
  }
\cs_new_protected:Npn \__scontents_set_active_eq:NN #1
  {
    \char_set_catcode_active:N #1
    \char_set_active_eq:NN #1
  }
\cs_new_protected:Npn \__scontents_make_control_chars_active:
  {
    \__scontents_set_active_eq:NN \^^I \__scontents_tab:
    \__scontents_set_active_eq:NN \^^L \__scontents_par:
    \__scontents_set_active_eq:NN \^^M \__scontents_ret:w
  }
%%^^A User command \setupsc
\NewDocumentCommand { \setupsc } { m }
  { \keys_set:nn { scontents } {#1} }
%%^^A User command \meaningsc
\NewDocumentCommand { \meaningsc } { O{1} m }
  {
    \group_begin:
      \tl_set:Nx \l__scontents_temp_tl { \__scontents_getfrom_seq:nn {#1} {#2} }
      \tl_set:Nx \l__scontents_temp_tl
        { \__scontents_strip_rescan:N \l__scontents_temp_tl }
      \tl_replace_all:Nxn \l__scontents_temp_tl { \iow_char:N \^^J } { ~ }
      \tl_remove_once:NV \l__scontents_temp_tl \c__scontents_hidden_space_str
      \tl_log:N \l__scontents_temp_tl
      \ttfamily
      \cs_replacement_spec:N \l__scontents_temp_tl
    \group_end:
  }
%%^^A User command \countsc
\NewExpandableDocumentCommand { \countsc } { m }
  { \seq_count:c { g__scontents_seq_name_#1_seq } }
%%^^A User command \cleanseqsc
\NewDocumentCommand { \cleanseqsc } { m }
  { \seq_clear_new:c { g__scontents_seq_name_#1_seq } }
%%^^A Messages
\msg_new:nnn { scontents } { junk-after-begin }
  {
    Junk~characters~#1~\msg_line_context: :
    \\ \\
    #2
  }
\msg_new:nnn { scontents } { empty-stored-content }
  { Empty~value~for~key~`getstored'~\msg_line_context:. }
\msg_new:nnn { scontents } { empty-variable }
  { Variable~`#1'~empty~\msg_line_context:. }
\msg_new:nnn { scontents } { rewriting-file }
  { Overwriting ~ file ~ `#1' }
\msg_new:nnn { scontents } { writing-file }
  { Writing ~ file ~ `#1' }
\msg_new:nnn { scontents } { ignoring-text }
  { Ignoring~text~`#1'~after~\c_backslash_str end{scontents}~\msg_line_context:.}
\msg_new:nnn { scontents } { tab-to-space }
  { Tab has been converted to Blank Space }
\msg_new:nnn { scontents } { feed-to-space }
  { Form Feed has been converted to Blank Space }
%%^^A Finish package
\file_input_stop:
